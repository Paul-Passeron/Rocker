<let expression> ::= 
    'let' <val identifier> ':' <type statement> '=>' <expression>

<val identifier> ::=
    <identifier> |
    '(' ')'

<type statement> ::=
    <type name> |
    <type name> '->' <type statement>

<if expression> ::=
    'if' <expression> 'then' <expression> ['else' <expression>]

<type definition> ::= 
    <type specifier><identifier> '=>''{'<type declaration>'}'

<type declaration> ::= 
    <identifier>':'<type statement>[','<type declaration>]

<match expression> ::=
    'match' <expression> => '{'
        <match body>
    '}'

<match body> ::= 
    '->' <expression> ':' <expression> [<match body>]


<compound expression> ::=
    '{'<expression>'}' |
    '('<expression>')' 

<expression> ::=
    <match expression>
    <if expression>
    <let expression>
    <let expression> 'in' <expression>
    <compound expression>


<literal> ::= 
    <string lit> |
    <num lit>    |
    <char lit>

<factor> ::=
    <value call>

<mult operator> ::=
    '*' |
    '/' | 
    '%'

<add operator> ::= 
    '+' |
    '-'

<relation operator> ::=
    '>' |
    '<' |
    '>='|
    '<='|
    '=='|
    '!='

<term> ::= 
    <factor> [<mult operator> <term>]

<add expr> ::=
    <term> [<add operator> <add expression>]

<relation expression> ::=
    <addr expression> |
    <add expression> <relation operator> <relation epression>

<bitwise and expression> ::=
    <relation expression> |
    <relation experssion> '&' <bitwise and expression>

<bitwise xor expression> ::=
    <bitwise and expression> |
    <bitwise and expression> '^' <bitwise xor expression>

<bitwise or expression> ::=
    <bitwise xor expression> |
    <bitwise xor expression> '|' <bitwise or expression

<logical and expression> ::= 
    <bitwise or expression> |
    <bitwise or expression> '&&' <logical and expression>

<logical or expression> ::=
    <logical and expression> |
    <logical and expression> '||' <logical or expression>

<primary expression> ::=
    <logical or expression>
