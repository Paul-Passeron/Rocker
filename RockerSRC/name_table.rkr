//-----------------------------------------------------------------------------
//  ROCKER NAME TABLE
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------


enum nt_kind => {
    NT_FUN,
    NT_VAR,
    NT_USER_TYPE,
    NT_BUILTIN_TYPE,
}

rec nt_elem => {
    kind: nt_kind,
    name: string,
    scope: int,
    ref: ast,
}

rec nt => {
    elems: nt_elem [],
    scope: int
}

let get_ref(name: string, table: nt):ast => {
    let elems: nt_elem [] => table::elems;
    let max_scope: int => 0-1;
    let res: ast => NULL;
    loop i: 0 -> get_length(elems) - 1 => {
        let elem: nt_elem => get(elems, i);
        if str_eq(elem::name, name) && max_scope < elem::scope then {
            max_scope => elem::scope;
            res => elem::ref;
        }
    }
    return res;
}

let new_nt(): nt => {
    let elems: nt_elem [] => [];
    let res: nt => {
        elems => elems,
        scope => 0,
    };
    return res;
}

let new_nt_scope(table: nt): void => {
    table::scope => table::scope + 1;
}
let end_nt_scope(table: nt): void => {
    let elems: nt_elem [] => table::elems;
    let i: int => get_length(elems) - 1;
    let break_cond: boolean => false;
    while i >= 0 && break_cond = false do {
        let elem: nt_elem => get(elems, i);
        if elem::scope < table::scope then
            break_cond => true;
        else 
            pop(elems);
        i => i - 1;
    }
}

let push_nt(table: nt, name:string, kind: nt_kind, ref: ast): void => {
    let res: nt_elem => {
        kind => kind,
        name => name,
        ref => ref,
        scope => table::scope
    };
    let elems: nt_elem [] => table::elems;
    append(elems, res);
}

