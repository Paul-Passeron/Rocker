//-----------------------------------------------------------------------------
//  ROCKER GENERATOR
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------

include "RockerSRC/name_table.rkr"
include "RockerSRC/stdlib.rkr"

rec gen => {
    f: file,
    table: nt
    error: boolean,
    current_fun: string,
}

let new_gen(filename: string): gen => {
    let res: gen => {
        f => open_file(filename, WRITE_MODE),
        table => new_nt(),
        current_fun => ""
    };
    return res;
}

let kill_generator(g: gen): void => {
    close_file(g::f);
}

let generate_type(g: gen, a: ast): void => {
    let type: ast_type => a::Data::data_type;
    if type::is_array then pfile(g::f, "__internal_dynamic_array_t");
    else pfile(g::f, type::name::Lexeme);
}

let generate_gen_type_fun(g: gen, funcall: ast_funcall, suffixe: string): void => {
    let args: ast [] => funcall::args;
    let arr_ast: ast => get(args, 0);
    let type: type_spec => get_type_of_expression(g::table, arr_ast);
    if type::arrays <= 1 then
        pfile(g::f, type::base_type);
    else
        pfile(g::f, "__internal_dynamic_array_t");
    pfile(g::f, suffixe);
    pfile(g::f,"(");
        loop i: 0 -> get_length(args) - 1 => {
            if i > 0 then pfile(g::f, ", ");
            generate_expression(g, get(args, i));
        }
    pfile(g::f, ")");
}

let generate_append(g: gen, funcall: ast_funcall): void => {
   generate_gen_type_fun(g, funcall, "_push_array");
}

let generate_get(g: gen, funcall: ast_funcall): void => {
   generate_gen_type_fun(g, funcall, "_get_elem");
}

let generate_set(g: gen, funcall: ast_funcall): void => {
   generate_gen_type_fun(g, funcall, "_set_elem");
}

let generate_pop(g: gen, funcall: ast_funcall): void => {
   generate_gen_type_fun(g, funcall, "_pop_array");
}

let generate_funcall(g: gen, fun: ast): void => {
    let funcall: ast_funcall => fun::Data::data_funcall;
    let ref: nt_elem => get_ref(funcall::name::Lexeme, g::table);
    let is_error: boolean => false;

    if ref = NULL then is_error => true;
    else if ref::Tag != fdef then  is_error => true;
    if is_error then {
        g::error => true;
        print_error_prefix_tok(funcall::name);
        print_color(" [Syntax Error]", ROCKER_RED);
        print(" Function \'");
        print_underline(funcall::name::Lexeme);
        print("\' is not declared within program !\n");
    }
    if str_eq(funcall::name::Lexeme, "append") then
        generate_append(g, funcall);
    else if str_eq(funcall::name::Lexeme, "get") then
        generate_get(g, funcall);
    else if str_eq(funcall::name::Lexeme, "set") then
        generate_set(g, funcall);
    else if str_eq(funcall::name::Lexeme, "pop") then
        generate_pop(g, funcall);
    else if str_eq(funcall::name::Lexeme, "exit") then {
        pfile(g::f, "exit_rocker(");
        let args: ast [] => funcall::args;
        loop i: 0 -> get_length(args) - 1 => {
            if i > 0 then pfile(g::f, ", ");
            generate_expression(g, get(args, i));
        }
        pfile(g::f, ")");
    }
    else if str_eq(funcall::name::Lexeme, "system") then {
        pfile(g::f, "system(string_to_cstr(");
        let args: ast [] => funcall::args;
        loop i: 0 -> get_length(args) - 1 => {
            if i > 0 then pfile(g::f, ", ");
            generate_expression(g, get(args, i));
        }
        pfile(g::f, "))");
    }
    else {
        pfile(g::f, funcall::name::Lexeme);
        pfile(g::f, "(");
        let args: ast [] => funcall::args;
        loop i: 0 -> get_length(args) - 1 => {
            if i > 0 then pfile(g::f, ", ");
            generate_expression(g, get(args, i));
        }
        pfile(g::f, ")");
    }    
}

let get_lit_str_length(s: string): int => {
    let length: int => 0;
    loop i: 0 -> get_string_length(s) - 1 => {
        if get_nth_char(s, i) = '\\' then {
            i => i + 1;
            let c: char => get_nth_char(s, i);
            if c = 'n' || c = 't'  || c = '\\' ||
              c = '\"' || c = '\'' || c = 'r' then
                length => length + 1; 
            else length => length + 2;
        }
        else length => length + 1;
    }
    return length;
}

let generate_op(g: gen, expr: ast): void => {
    let op: ast_op => expr::Data::data_op;
    generate_expression(g, op::left);
    if op::op = TOK_EQUAL then
        pfile(g::f, "==");
    else
        pfile(g::f, lexeme_of_type(op::op));
    generate_expression(g, op::right);
}

let generate_if_statement(g: gen, stmt: ast): void => {
    let ifstmt: ast_ifstmt => stmt::Data::data_ifstmt;
    pfile(g::f, "if (");
    generate_expression(g, ifstmt::expr);
    pfile(g::f, ")\n");
    generate_statement(g, ifstmt::body);
    if ifstmt::elsestmt != NULL then{
        pfile(g::f, "else\n");
        generate_statement(g, ifstmt::elsestmt);
    }
}

let generate_array_funcs(g: gen, type_name: string): void => {
        pfile(g::f, "__internal_dynamic_array_t ");
        pfile(g::f, type_name);
        pfile(g::f, "_make_array(void) {\n");
        pfile(g::f, "return __internal_make_array(sizeof(");
        pfile(g::f, type_name);
        pfile(g::f, "));\n");
        pfile(g::f, "}\n\n");
        pfile(g::f, " void ");
        pfile(g::f, type_name);
        pfile(g::f, "_push_array(__internal_dynamic_array_t arr, ");
        pfile(g::f, type_name);
        pfile(g::f," elem) {\n");
        pfile(g::f, "  __internal_push_array(arr, &elem);\n");
        pfile(g::f, "}\n\n");
        pfile(g::f, type_name);
        pfile(g::f, " ");
        pfile(g::f, type_name);
        pfile(g::f, "_pop_array(__internal_dynamic_array_t arr) {\n ");
        pfile(g::f, type_name);
        pfile(g::f, " *res = __internal_pop_array(arr);\n");
        pfile(g::f, "  return *res;\n");
        pfile(g::f, "}\n\n");
        pfile(g::f, type_name);
        pfile(g::f, " ");
        pfile(g::f, type_name);
        pfile(g::f, "_get_elem(__internal_dynamic_array_t arr, size_t index) {\n ");
        pfile(g::f, type_name);
        pfile(g::f, " *res = __internal_get_elem(arr, index);\n");
        pfile(g::f,"  if (res == NULL){ printf(\"NULL ELEMENT IN ");
        pfile(g::f, type_name);
        pfile(g::f, "_get_elem\"); exit_rocker(1);}");
        pfile(g::f, "  return *res;\n");
        pfile(g::f, "}\n\n");
        pfile(g::f, "void ");
        pfile(g::f, type_name);
        pfile(g::f, "_set_elem(__internal_dynamic_array_t arr, size_t index, ");
        pfile(g::f ,type_name);
        pfile(g::f, " elem) {\n");
        pfile(g::f, "  __internal_set_elem(arr, index, &elem);\n");
        pfile(g::f, "}\n\n");
        pfile(g::f,"void ");
        pfile(g::f, type_name);
        pfile(g::f, "_insert(__internal_dynamic_array_t arr, size_t index, ");
        pfile(g::f, type_name);
        pfile(g::f, " elem) {\n");
        pfile(g::f, "  __internal_insert(arr, index, &elem);\n");
        pfile(g::f, "}\n\n");
}



let generate_loop(g: gen, loop_ast: ast): void => {
    let l: ast_loop => loop_ast::Data::data_loop;
    new_nt_scope(g::table);
    let var: nt_var => {
        type => get_builtin_type("int")
    };
    let res: nt_elem => {
        Tag => vdef,
        name => l::variable::Lexeme,
        var => var,
    };
    push_nt(g::table, l::variable::Lexeme, res);
    pfile(g::f, "for(int ");
    pfile(g::f, l::variable::Lexeme);
    pfile(g::f, " =");
    generate_expression(g, l::start);
    pfile(g::f, "; ");
    pfile(g::f, l::variable::Lexeme);
    pfile(g::f, " <= (int)");
    generate_expression(g, l::end);
    pfile(g::f, "; ");
    pfile(g::f, l::variable::Lexeme);
    pfile(g::f, "++)");
    generate_statement(g, l::statement);
    end_nt_scope(g::table);
}

let generate_sub_as_expression(g: gen, expr: ast): void => {
    let sub: ast_sub => expr::Data::data_sub;
    let path: token [] => sub::path;
    loop i: 0 -> get_length(path) - 1 => {
        let tok: token => get(path, i);
        pfile(g::f, tok::Lexeme);
        pfile(g::f, "->");

    }
    generate_expression(g, sub::expr);
}

let generate_while_loop(g: gen, l: ast): void => {
    let while_loop: ast_while_loop => l::Data::data_while_loop;
    pfile(g::f, "while (");
    generate_expression(g, while_loop::condition);
    pfile(g::f, ")\n");
    generate_statement(g, while_loop::statement);
}

let generate_enum_tdef(g: gen, expr: ast): void => {
    let enum_tdef: ast_enum_tdef => expr::Data::data_enum_tdef;
    pfile(g::f, "enum ");
    pfile(g::f, enum_tdef::name::Lexeme);
    pfile(g::f, " {\n");
    let items: token [] => enum_tdef::items;  
    loop i: 0 -> get_length(items) - 1 => {
        if i > 0 then pfile(g::f, ",\n");
        let tok: token => get(items, i);
        pfile(g::f, tok::Lexeme);
    }
    pfile(g::f, "\n};\n");
}

let generate_expression(g: gen, expr: ast): void => {
    if expr::Tag = tag_literal then {
        let tok: token => expr::Data::data_literal::lit;
        if tok::Type != TOK_STR_LIT then
            pfile(g::f, tok::Lexeme);
        else {
            pfile(g::f, "new_string((string){.data = ");
            pfile(g::f, tok::Lexeme);
            pfile(g::f, ", .length = ");
            pfile(g::f, string_of_int(get_lit_str_length(tok::Lexeme)-2));
            pfile(g::f, "})");
        }
    } else if expr::Tag = tag_identifier then 
        // for the moment we don't perform any checks
        pfile(g::f, expr::Data::data_identifier::id::Lexeme); 
    else if expr::Tag = tag_funcall then
        generate_funcall(g, expr);
    else if expr::Tag = tag_op then
        generate_op(g, expr);
    else if expr::Tag = tag_sub then
        generate_sub_as_expression(g, expr);  
    else {
        print("Could not generate expression !\n");
        print_int(expr::Tag);
        print("th tag is not implemented yet !\n");
        compiler_assert(false, "TODO\n");
    }
}


let generate_assign(g: gen, expr: ast): void => {
    let assign: ast_assign => expr::Data::data_assign;
    generate_expression(g, assign::target);
    pfile(g::f, " = ");
    generate_expression(g, assign::expr);
    pfile(g::f, ";\n");
}

let is_builtin_typename(name: string): boolean => {
    if str_eq(name, "int") then return true; 
    if str_eq(name, "boolean") then return true; 
    if str_eq(name, "string") then return true; 
    if str_eq(name, "char") then return true; 
    if str_eq(name, "void") then return true; 
    return false;
}

let generate_vardef(g: gen, var: ast): void => {
    let vardef: ast_vardef => var::Data::data_vardef;
    let elem: nt_elem => get_nt_var(vardef);
    push_nt(g::table, vardef::name::Lexeme, elem);

    let expr_type: type_spec => get_type_of_expression(g::table, vardef::expr);
    if expr_type::arrays = 0 then
        expr_type => get_tdef_ref(expr_type::base_type, g::table);
    if expr_type = NULL then {
        g::error => true;
        print_error_prefix_tok(vardef::name);
        print(" Could not resolve type of expression in variable declaration.\n");
    }
    let expected_type: type_spec => elem::var::type;
    if expected_type::arrays = 0 then
        expected_type => get_tdef_ref(expected_type::base_type, g::table);
    if are_types_compatible(expr_type, expected_type) = false then {
        g::error => true;
        print_error_prefix_tok(vardef::name);
        if str_eq(g::current_fun, "") = false then{
            print(" In function \'");
            print(g::current_fun);
            print("\': ");
        }
        print(" Type mismatch in definition of variable \'");
        print(vardef::name::Lexeme);
        print("\'. Expected: \'");
        print_type_spec(expected_type);
        print("\' but got: \'");
        print_type_spec(expr_type);
        print("\'\n");
        
    }
    let type_name: string =>
        vardef::type::Data::data_type::name::Lexeme;
    if vardef::type::Data::data_type::is_array &&
       vardef::expr::Tag = tag_literal then {
        generate_type(g, vardef::type);
        pfile(g::f, " ");
        pfile(g::f, vardef::name::Lexeme);
        pfile(g::f, " = ");
        // Defining an empty array
        compiler_assert(vardef::expr::Data::data_literal::lit::Type = TOK_ARR_DECL, "Cannot declare arrays this way !\n");
        pfile(g::f, type_name);
        pfile(g::f, "_make_array();\n");
    } else if is_builtin_typename(type_name) ||
        vardef::type::Data::data_type::is_array then {
        generate_type(g, vardef::type);
        pfile(g::f, " ");
        pfile(g::f, vardef::name::Lexeme);
        pfile(g::f, " = ");
        generate_expression(g, vardef::expr);
        pfile(g::f, ";\n");
    } else if vardef::expr::Tag = tag_record_expr then {
        generate_type(g, vardef::type);
        pfile(g::f, " ");
        pfile(g::f, vardef::name::Lexeme);
        pfile(g::f, ";\n{\nstruct ");
        generate_type(g, vardef::type);
        pfile(g::f, " __internal_tmp = {\n");
        let record: ast_record_expr => 
            vardef::expr::Data::data_record_expr;
        let names: token [] => record::names;
        let exprs: ast [] => record::exprs;
        // Zero initialized
        if get_length(names) = 0 then pfile(g::f, "0"); 
        loop i: 0 -> get_length(names) - 1 => {
            if i > 0 then pfile(g::f, ",\n");
            let name: token => get(names, i);
            let expr: ast => get(exprs, i);
            pfile(g::f, ".");
            pfile(g::f, name::Lexeme);
            pfile(g::f, " = ");
            let expr_type: type_spec => get_type_spec_of_constructor(expected_type, name::Lexeme);
            if expr_type = NULL then {
                print("TDOD\n");
                exit(1);
            }
            if expr_type::arrays = 0 then{
                expr_type => get_tdef_ref(expr_type::base_type, g::table);
                generate_expression(g, expr);
            } else {
                if expr::Tag = tag_literal then {
                    if expr::Data::data_literal::lit::Type = TOK_ARR_DECL then {
                        if expr_type::arrays = 1 then
                            pfile(g::f, expr_type::base_type);
                        else
                            pfile(g::f, "__internal_dynamic_array_t");
                        pfile(g::f, "_make_array()\n");

                    }
                    else {
                        generate_expression(g, expr);
                    }
                }
                else {
                    generate_expression(g, expr);
                }
            }
        }
        pfile(g::f, "};\n");
        pfile(g::f, vardef::name::Lexeme);
        pfile(g::f, " = allocate_compiler_persistent(sizeof(struct ");
        generate_type(g, vardef::type);
        pfile(g::f, "));\n*");        
        pfile(g::f, vardef::name::Lexeme);
        pfile(g::f, " = __internal_tmp;\n}\n");
    }else {
        generate_type(g, vardef::type);
        pfile(g::f, " ");
        pfile(g::f, vardef::name::Lexeme);
        pfile(g::f, " = ");
        generate_expression(g, vardef::expr);
        pfile(g::f, ";\n");
    }
}

let generate_return(g: gen, ret_ast: ast): void => {
    pfile(g::f, "return ");
    let expr: ast => ret_ast::Data::data_ret::expr; 
    if expr != NULL then
        generate_expression(g, expr);
    pfile(g::f, ";\n");
}

let generate_statement(g: gen, a: ast): void => {
    let tag: ast_kind => a::Tag;
    if tag = tag_vardef then
        generate_vardef(g, a);
    else if tag = tag_ret then
        generate_return(g, a);
    else if tag = tag_compound then
        generate_compound(g, a);
    else if tag = tag_ifstmt then
        generate_if_statement(g, a);
    else if tag = tag_tdef then
        generate_tdef(g, a);
    else if tag = tag_enum_tdef then
        generate_enum_tdef(g, a);
    else if tag = tag_fundef then
        generate_fundef(g, a);
    else if tag = tag_loop then
        generate_loop(g, a);
    else if tag = tag_while_loop then
        generate_while_loop(g, a);
    else if tag = tag_assign then
        generate_assign(g, a);
    else {
        generate_expression(g, a);
        pfile(g::f, ";\n");
    }    
}


let generate_tdef(g: gen, a: ast): void => {

    let tdef: ast_tdef => a::Data::data_tdef;
    let name: string => tdef::name::Lexeme;
    pfile(g::f, "struct ");
    pfile(g::f, name);
    pfile(g::f, "{\n");
    compiler_assert(tdef::t != TDEF_PRO, "Product type definition not implemented yet\n");
    let constructors: ast [] => tdef::constructors;
    loop i: 0 -> get_length(constructors) - 1 => {
        let cons_ast: ast => get(constructors, i);
        let cons: ast_cons => cons_ast::Data::data_cons;
        let type: ast_type => cons::type::Data::data_type;
        if str_eq("void", type::name::Lexeme) = false then {
            generate_type(g, cons::type);
            pfile(g::f, " ");
            pfile(g::f, cons::name::Lexeme);
            pfile(g::f,  ";\n");
        }
    }
    pfile(g::f, "};\n");
}


let generate_compound(g: gen, expr: ast): void => {
    pfile(g::f, "{\n");
    let compound: ast_compound => expr::Data::data_compound;
    new_nt_scope(g::table);
    let stmts: ast [] => compound::stmts;
    loop i: 0 -> get_length(stmts) - 1 =>
        generate_statement(g, get(stmts, i));
    end_nt_scope(g::table);
    pfile(g::f, "\n}\n");
}


let generate_fundef_proto(g: gen, fun: ast, add: boolean): void => {
    let fundef: ast_fundef => fun::Data::data_fundef;
    generate_type(g, fundef::ret_type);
    pfile(g::f, " ");
    pfile(g::f, fundef::name::Lexeme);
    pfile(g::f, "(");
    let args: token [] => fundef::args;
    let types: ast [] => fundef::types;
    loop i: 0 -> get_length(args) - 1 => {
        let arg: token => get(args, i);
        let type: ast => get(types, i);
        if add then {
            let elem_var: nt_var => {
                type => nt_type_of_ast(type)
            };
            let elem: nt_elem => {
                Tag => vdef,
                name => arg::Lexeme,
                var => elem_var
            };
            push_nt(g::table, arg::Lexeme, elem);
        }
        if i > 0 then
            pfile(g::f, ", ");
        generate_type(g, type);
        pfile(g::f, " ");
        pfile(g::f, arg::Lexeme);
    }
    pfile(g::f, ")");
}

let generate_fundef(g: gen, fun: ast): void => {
    let fundef: ast_fundef => fun::Data::data_fundef;
    g::current_fun => fundef::name::Lexeme;
    new_nt_scope(g::table);
    if str_eq(fundef::name::Lexeme, "main") = false then {
        generate_fundef_proto(g, fun, true);
        generate_compound(g, fundef::body);
        pfile(g::f, "\n\n");
    } else {
        pfile(g::f, "int main(int argc, char **argv) {\n");
        pfile(g::f, "init_rocker(argc, argv);\n");
        generate_compound(g, fundef::body);
        pfile(g::f, "end_rocker();\n");
        pfile(g::f, "return 0;\n");
        pfile(g::f, "}\n\n");
    }
    end_nt_scope(g::table);
    g::current_fun => "";

}

let generate_forward_defs(g: gen, program: ast): void => {
    let stmts: ast [] => program::Data::data_program::prog;
    loop i: 0 -> get_length(stmts) - 1 => {
        let stmt: ast => get(stmts, i);
        if stmt::Tag = tag_tdef then {
            let tdef: ast_tdef => stmt::Data::data_tdef;
            push_nt(g::table, tdef::name::Lexeme, get_nt_tdef(tdef));
            let name: string => tdef::name::Lexeme;
            pfile(g::f, "typedef struct ");
            pfile(g::f, name);
            pfile(g::f, "*");
            pfile(g::f, name);
            pfile(g::f, ";\n\n");
            generate_array_funcs(g, name);
        } else if stmt::Tag = tag_enum_tdef then {
            let enum_tdef: ast_enum_tdef => stmt::Data::data_enum_tdef;
            push_nt(g::table, enum_tdef::name::Lexeme, get_nt_enum_tdef(enum_tdef));
            add_enum_cons_to_nt(g::table, enum_tdef);            
            let name: string => enum_tdef::name::Lexeme;
            pfile(g::f, "typedef enum ");
            pfile(g::f, name);
            pfile(g::f, " ");
            pfile(g::f, name);
            pfile(g::f, ";\n");
        }
    }
    loop i: 0 -> get_length(stmts) - 1 => {
        let stmt: ast => get(stmts, i);
        if stmt::Tag = tag_fundef then {
            let fundef: ast_fundef => stmt::Data::data_fundef;
            let name: string => fundef::name::Lexeme;
            if str_eq(name, "main") = false then {
                push_nt(g::table, fundef::name::Lexeme, get_nt_fun(fundef));
                generate_fundef_proto(g, stmt, false);
                pfile(g::f, ";\n");
            }
        }
    }
}

let transpile(g: gen, program: ast): void => {
    setup_name_table(g::table);
    let stmts: ast [] => program::Data::data_program::prog;
    pfile(g::f, "#include \"./src/generation/fundefs.h\"\n");
    pfile(g::f, "#include \"./src/generation/fundefs_internal.h\"\n");
    pfile(g::f, "#include \"./src/generation/typedefs.h\"\n");
    pfile(g::f, "#include \"./RockerAllocator/alloc.h\"\n");
    generate_forward_defs(g, program);
    loop i: 0 -> get_length(stmts) - 1 => {
        generate_statement(g, get(stmts, i));
    }

}