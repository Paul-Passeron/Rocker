//-----------------------------------------------------------------------------
//  ROCKER COMPILER
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------

// Compiler of Rocker programming 
// language written in itself !

include "RockerSRC/stdlib.rkr"
include "RockerSRC/lexer.rkr"
include "RockerSRC/parser.rkr"
include "RockerSRC/generator.rkr"
include "RockerSRC/typechecker.rkr"

let usage(prog_name: string): void => {
    print("Usage:\n");
    printf(string_to_cstr("\t%s <input file> [output file]\n"),
           string_to_cstr(prog_name));
}

let main(): void => {
    let args: string [] => get_args();
    let this_file: string => get(args, 0);
    if get_length(args) < 2 then{
        usage(this_file);
        exit(1);
    }
    let input: string => "";
    let output: string => "";
    let default_output: string => "a.out";
    let print_lexer: boolean => false;
    let quiet: boolean => true;
    let keep_tmp: boolean => false;
    loop i: 1 -> get_length(args) - 1 => {
        let arg: string => get(args, i);
        if get_nth_char(arg, 0) = '-' then {
            if get_string_length(arg) = 1 then {
                print("Unexpected emtpy flag !\n");
                usage(this_file);
                exit(1);
            }
            if get_nth_char(arg, 1) = 'l' && print_lexer = false then
                print_lexer => true;
            else if get_nth_char(arg, 1) = 'v' && print_lexer = false then
                quiet => false;
            else if str_eq(arg, "-tmp") then
                keep_tmp => true;
            else {
                print("Unknown flag \'");
                print(arg);
                print("\'!\n");
                usage(this_file);
                exit(1);
            }
        } else if get_string_length(input) = 0 then input => arg; 
         else if get_string_length(output) = 0 then output => arg;
         else {
            print("Unexpected argument: \'");
            print(arg);
            print("\'!\n");
            usage(this_file);
            exit(1);
        }
    }
    if get_string_length(input) = 0 then {
        print("Expected input !\n");
        usage(this_file);
        exit(1);
    }
    if get_string_length(output) = 0 then
       output => default_output;
    let l: lexer => new_lexer(input);
    lex_program(l);
    let toks: token[] => l::Toks;
    let p: parser => new_parser(toks);
    parse_program(p);
    if print_lexer then
        print_list_types(p::Toks);
    let cout: string => concat_string(output, ".c");
    let g: gen => new_gen(cout);
    transpile(g, p::Prog);
    kill_generator(g);
    if quiet = false then 
        print("[INFO] Transpiling to C successful\n");
    let command: string => "";
    command => concat_string(command, "clang-format ");
    command => concat_string(command, cout);
    command => concat_string(command, " -i");
    command => concat_string(command, " && ");
    command => concat_string(command, " gcc -Wall -g -o ");
    command => concat_string(command, output);
    command => concat_string(command, " ");
    command => concat_string(command, cout);
    command => concat_string(command,  " src/generation/fundefs.c");
    command => concat_string(command, " src/generation/fundefs_internal.c");
    command => concat_string(command, " RockerAllocator/alloc.c");
    if quiet = false then {
        print("[CMD]  ");
        print(command);
        print("\n");

    }
    system(string_to_cstr(command));
    if quiet = false then 
        print("[INFO] Compiling transpiled C file successful\n");
    if keep_tmp = false then {

    let remove_tmp: string => "rm ";
        remove_tmp => concat_string(remove_tmp, cout);
        if str_eq(cout, "") = false then {
            if quiet = false then {
                print("[CMD]  ");
                print(remove_tmp);
                print("\n");
                print("[INFO] Removing transpiled C file successful\n");
            }
            system(string_to_cstr(remove_tmp));
        }
    }
    if quiet = false then
        print("[INFO] Rocker compiling successful\n");
}

//-----------------------------------------------------------------------------
