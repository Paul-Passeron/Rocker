//-----------------------------------------------------------------------------
//  ROCKER COMPILER
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------

// Compiler of Rocker programming 
// language written in itself !

include "RockerSRC/stdlib.rkr"
include "RockerSRC/lexer.rkr"
// include "RockerSRC/parser.rkr"

//-----------------------------------------------------------------------------
// TOKEN LIST FUNCTIONS
//-----------------------------------------------------------------------------
rec token_list => {
    Head: token,
    Tail: token_list
}


let append_token(l: token_list, t: token): token_list => {
    let res : token_list => {
        Head => t,
        Tail => l
    };
    return res;
}


let get_nth_token_aux(l: token_list, n: int): token => {
    if l = NULL then {
        print("Index out of range: Cannot access token !\n");
        exit(1);
    }
    if n = 0 then return l::Head;
    return get_nth_token_aux(l::Tail, n-1);
}


let get_list_length(l: token_list): int => {
    if l = NULL then return 0;
    return 1 + get_list_length(l::Tail);
}

let get_nth_token(l: token_list, n: int) : token => {
    return get_nth_token_aux(l, get_list_length(l) - n - 1);
}

let print_list_types(l: token_list) : void => {
    let len: int => get_list_length(l);
    loop i: 0 -> len-1 => {
        let tok: token => get_nth_token(l, i);
        print("-> ");
        print(lexeme_of_type(tok::Type));
        print(": '");
        print(tok::Lexeme);
        print("'\n");
    }
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// MAIN FUNCTION
//-----------------------------------------------------------------------------



let main(): int => {
    let l: lexer => new_lexer("RockerSRC/main.rkr");
    lex_program(l);
    print_int(get_list_length(l::Toks));
    print("\n");
    return 0;
}

//-----------------------------------------------------------------------------
