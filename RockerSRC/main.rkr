//-----------------------------------------------------------------------------
//  ROCKER COMPILER
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------

// Compiler of Rocker programming 
// language written in itself !

include "RockerSRC/stdlib.rkr"
include "RockerSRC/lexer.rkr"
include "RockerSRC/parser.rkr"
include "RockerSRC/generator.rkr"

let usage(prog_name: string): void => {
    print("Usage:\n");
    printf(string_to_cstr("\t%s <input file> [output file]\n"),
           string_to_cstr(prog_name));
}

let main(): void => {
    let args: string [] => get_args();
    let this_file: string => get(args, 0);
    if get_length(args) < 2 then{
        usage(this_file);
        exit(1);
    }
    let input: string => "";
    let output: string => "";
    let default_output: string => "a.out";
    let print_lexer: boolean => false;

    loop i: 1 -> get_length(args) - 1 => {
        let arg: string => get(args, i);
        if get_nth_char(arg, 0) = '-' then {
            if get_string_length(arg) = 1 then {
                print("Unexpected empy flag !\n");
                usage(this_file);
                exit(1);
            }
            if get_nth_char(arg, 1) = 'l' && print_lexer = false then
                print_lexer => true;
            else {
                print("Unknows flag \'");
                print(arg);
                print("\'!\n");
                usage(this_file);
                exit(1);
            }
        } else if get_string_length(input) = 0 then input => arg; 
         else if get_string_length(output) = 0 then output => arg;
         else {
            print("Unexpected argument: \'");
            print(arg);
            print("\'!\n");
            usage(this_file);
            exit(1);
        }
    }
    if get_string_length(input) = 0 then {
        print("Expected input !\n");
        usage(this_file);
        exit(1);
    }
    if get_string_length(output) = 0 then
       output => default_output;
    let l: lexer => new_lexer(input);
    lex_program(l);
    let toks: token[] => l::Toks;
    let p: parser => new_parser(toks);
    parse_program(p);
    if print_lexer then
        print_list_types(p::Toks);
    let cout: string => concat_string(output, ".c");
    let g: gen => new_gen(cout);
    generate_array_funcs(g, "token");
    kill_generator(g);
}

//-----------------------------------------------------------------------------
