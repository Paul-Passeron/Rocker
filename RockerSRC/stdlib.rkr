//-----------------------------------------------------------------------------
//  ROCKER STANDARD LIBRARY
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// FILE HANDLING
//-----------------------------------------------------------------------------

rec file => {
    Filename: string,
    Data: string,
    Mode: int,
}


enum file_mode => {
    READ_MODE,
    WRITE_MODE,
    CLOSED
}


let open_file(filename: string, mode: file_mode): file => {
    let res: file => {
        Filename => filename,
        Data => "",
        Mode => mode
    }; 
    if mode = READ_MODE then  
        res::Data => read_file(filename);
    else if mode != WRITE_MODE then
    {
        print("Could not open file \'");
        print(filename);
        print("\': Invalid mode specified\n");
        exit(1);
    }
    return res;
}

let close_file(f: file): void => {
    write_string_to_file(f::Data, f::Filename);
    f::Data => "";
    f::Filename => "";
}

let pfile(f: file, s: string): void => {
    f::Data => concat_string(f::Data, s);
}
//-----------------------------------------------------------------------------




//-----------------------------------------------------------------------------
// UTILS FUNCTIONS
//-----------------------------------------------------------------------------

let implemented(s: string): void => {
    print("TODO: ");
    print(s);
    print(" is not yet implemented\n");
    exit(1);
}


let compiler_assert(b: boolean, s: string): void => {
    if b = 0 then {
        print("Assertion failed: ");
        print(s);
        exit(1);
    }
}

let print_int(n: int): void => {
  let a: int => n / 10;
  if a then print_int(a);
  putchar(n%10 + '0');
}

let string_of_int(n: int): string => {
    let chars: char [] => [];
    if n = 0 then append(chars, '0');
    while n > 0 do {
        append(chars, n%10 + '0');
        n => n/10;
    }
    let res: string => "";
    loop i: 0 -> get_length(chars) -1 =>
        res =>
            append_string(res, get(chars, get_length(chars) - 1 - i));

    // Using C bindings lol
    return res;   
}


let create_string(src: string, offset: int,  length: int): string => {
    let res: string => "";
    loop i: 0 -> length - 1 => {
        let c: char => get_nth_char(src, offset + i);
        res => append_string(res, c);
    }
    return res;
}
//-----------------------------------------------------------------------------

