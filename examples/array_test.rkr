let print_int(n: int): void => {
  let a: int => n / 10;
  if a then print_int(a);
  putchar(n%10 + '0');
}

let test(): void => {
    let arr : int [] => [];
    loop i: 0 -> 10 => {
      append(arr, i);
    }
    loop i: 0 -> get_length(arr) -1 => {
      let n: int =>get(arr, i); 
      print_int(n);
      print(" ");
    }
    print("\n");
}

rec array_wrapper => {
  Items: int [],
  Names: int [],
}

let func(): array_wrapper => {
  let a: array_wrapper => {
    Items => NULL,
    Names => NULL,
  };
  let items: int [] => [];
  a::Items => items;
  let names: string [] => [];
  a::Names => names;
  append(items, 1);
  append(names, "First\n");
  append(items, 2);
  append(names, "Second\n");
  append(items, 3);
  append(names, "Third\n");

  return a;
}

let main(): int => {
  test();
  let strings: string[] => [];
  append(strings, "Hey !\n");
  append(strings, "How are you ?\n");
  append(strings, "What ???\n");
  loop i: 0 -> get_length(strings) - 1 => {
    let s:  string => get(strings, i);
    print(s);
  }
  let a: array_wrapper => func();
  // For the moment, you must bind them by name to use them
  let names: string [] => a::Names;
  print("\n");
  loop i: 0 -> get_length(names) - 1 => {
    print(get(names, i));
  }
  return 0;
}

