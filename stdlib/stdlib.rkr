//-----------------------------------------------------------------------------
//  ROCKER STANDARD LIBRARY
//  MIT License
//  Copyright (c) 2024 Paul Passeron
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// UTILS FUNCTIONS
//-----------------------------------------------------------------------------
include "stdlib/file.rkr"


let implemented(s: string): void => {
    print("TODO: ");
    print(s);
    print(" is not yet implemented\n");
    exit(1);
}


let compiler_assert(b: boolean, s: string): void => {
    if b = 0 then {
        print("Assertion failed: ");
        print(s);
        exit(1);
    }
}

let print_int(n: int): void => {
  let a: int => n / 10;
  if a then print_int(a);
  putchar(n%10 + '0');
}

let string_of_int(n: int): string => {
    let chars: char [] => [];
    if n = 0 then append(chars, '0');
    while n > 0 do {
        append(chars, n%10 + '0');
        n => n/10;
    }
    let res: string => "";
    loop i: 0 -> get_length(chars) -1 =>
        res =>
            append_string(res, get(chars, get_length(chars) - 1 - i));

    // Using C bindings lol
    return res;   
}


let create_string(src: string, offset: int,  length: int): string => {
    let res: string => "";
    loop i: 0 -> length - 1 => {
        let c: char => get_nth_char(src, offset + i);
        res => append_string(res, c);
    }
    return res;
}

let cons_str(src: string, offset: int): string => {
    return create_string(src,
                         offset,
                         get_string_length(src) - offset);
}

//-----------------------------------------------------------------------------
